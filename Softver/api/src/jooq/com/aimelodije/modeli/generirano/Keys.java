/*
 * This file is generated by jOOQ.
 */
package com.aimelodije.modeli.generirano;


import com.aimelodije.modeli.generirano.tables.Album;
import com.aimelodije.modeli.generirano.tables.AlbumMelodija;
import com.aimelodije.modeli.generirano.tables.FlywaySchemaHistory;
import com.aimelodije.modeli.generirano.tables.Melodija;
import com.aimelodije.modeli.generirano.tables.Shedlock;
import com.aimelodije.modeli.generirano.tables.Umjetnik;
import com.aimelodije.modeli.generirano.tables.Zanr;
import com.aimelodije.modeli.generirano.tables.records.AlbumMelodijaRecord;
import com.aimelodije.modeli.generirano.tables.records.AlbumRecord;
import com.aimelodije.modeli.generirano.tables.records.FlywaySchemaHistoryRecord;
import com.aimelodije.modeli.generirano.tables.records.MelodijaRecord;
import com.aimelodije.modeli.generirano.tables.records.ShedlockRecord;
import com.aimelodije.modeli.generirano.tables.records.UmjetnikRecord;
import com.aimelodije.modeli.generirano.tables.records.ZanrRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AlbumRecord> ALBUM_PKEY = Internal.createUniqueKey(Album.ALBUM, DSL.name("album_pkey"), new TableField[] { Album.ALBUM.ID }, true);
    public static final UniqueKey<AlbumMelodijaRecord> ALBUM_MELODIJA_PKEY = Internal.createUniqueKey(AlbumMelodija.ALBUM_MELODIJA, DSL.name("album_melodija_pkey"), new TableField[] { AlbumMelodija.ALBUM_MELODIJA.ALBUM_ID, AlbumMelodija.ALBUM_MELODIJA.MELODIJA_ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<MelodijaRecord> MELODIJA_PKEY = Internal.createUniqueKey(Melodija.MELODIJA, DSL.name("melodija_pkey"), new TableField[] { Melodija.MELODIJA.ID }, true);
    public static final UniqueKey<ShedlockRecord> SHEDLOCK_PKEY = Internal.createUniqueKey(Shedlock.SHEDLOCK, DSL.name("shedlock_pkey"), new TableField[] { Shedlock.SHEDLOCK.NAME }, true);
    public static final UniqueKey<UmjetnikRecord> UMJETNIK_EMAIL_KEY = Internal.createUniqueKey(Umjetnik.UMJETNIK, DSL.name("umjetnik_email_key"), new TableField[] { Umjetnik.UMJETNIK.EMAIL }, true);
    public static final UniqueKey<UmjetnikRecord> UMJETNIK_KORIME_KEY = Internal.createUniqueKey(Umjetnik.UMJETNIK, DSL.name("umjetnik_korime_key"), new TableField[] { Umjetnik.UMJETNIK.KORIME }, true);
    public static final UniqueKey<UmjetnikRecord> UMJETNIK_PKEY = Internal.createUniqueKey(Umjetnik.UMJETNIK, DSL.name("umjetnik_pkey"), new TableField[] { Umjetnik.UMJETNIK.ID }, true);
    public static final UniqueKey<ZanrRecord> ZANR_NAZIV_KEY = Internal.createUniqueKey(Zanr.ZANR, DSL.name("zanr_naziv_key"), new TableField[] { Zanr.ZANR.NAZIV }, true);
    public static final UniqueKey<ZanrRecord> ZANR_PKEY = Internal.createUniqueKey(Zanr.ZANR, DSL.name("zanr_pkey"), new TableField[] { Zanr.ZANR.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AlbumRecord, UmjetnikRecord> ALBUM__ALBUM_UMJETNIK_ID_FKEY = Internal.createForeignKey(Album.ALBUM, DSL.name("album_umjetnik_id_fkey"), new TableField[] { Album.ALBUM.UMJETNIK_ID }, Keys.UMJETNIK_PKEY, new TableField[] { Umjetnik.UMJETNIK.ID }, true);
    public static final ForeignKey<AlbumMelodijaRecord, AlbumRecord> ALBUM_MELODIJA__ALBUM_MELODIJA_ALBUM_ID_FKEY = Internal.createForeignKey(AlbumMelodija.ALBUM_MELODIJA, DSL.name("album_melodija_album_id_fkey"), new TableField[] { AlbumMelodija.ALBUM_MELODIJA.ALBUM_ID }, Keys.ALBUM_PKEY, new TableField[] { Album.ALBUM.ID }, true);
    public static final ForeignKey<AlbumMelodijaRecord, MelodijaRecord> ALBUM_MELODIJA__ALBUM_MELODIJA_MELODIJA_ID_FKEY = Internal.createForeignKey(AlbumMelodija.ALBUM_MELODIJA, DSL.name("album_melodija_melodija_id_fkey"), new TableField[] { AlbumMelodija.ALBUM_MELODIJA.MELODIJA_ID }, Keys.MELODIJA_PKEY, new TableField[] { Melodija.MELODIJA.ID }, true);
    public static final ForeignKey<MelodijaRecord, UmjetnikRecord> MELODIJA__MELODIJA_AUTOR_ID_FKEY = Internal.createForeignKey(Melodija.MELODIJA, DSL.name("melodija_autor_id_fkey"), new TableField[] { Melodija.MELODIJA.AUTOR_ID }, Keys.UMJETNIK_PKEY, new TableField[] { Umjetnik.UMJETNIK.ID }, true);
    public static final ForeignKey<MelodijaRecord, ZanrRecord> MELODIJA__MELODIJA_ZANR_ID_FKEY = Internal.createForeignKey(Melodija.MELODIJA, DSL.name("melodija_zanr_id_fkey"), new TableField[] { Melodija.MELODIJA.ZANR_ID }, Keys.ZANR_PKEY, new TableField[] { Zanr.ZANR.ID }, true);
}
