/*
 * This file is generated by jOOQ.
 */
package com.aimelodije.modeli.generirano.tables;


import com.aimelodije.modeli.generirano.Keys;
import com.aimelodije.modeli.generirano.Public;
import com.aimelodije.modeli.generirano.tables.records.UmjetnikRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Umjetnik extends TableImpl<UmjetnikRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.umjetnik</code>
     */
    public static final Umjetnik UMJETNIK = new Umjetnik();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UmjetnikRecord> getRecordType() {
        return UmjetnikRecord.class;
    }

    /**
     * The column <code>public.umjetnik.id</code>.
     */
    public final TableField<UmjetnikRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.umjetnik.rola</code>.
     */
    public final TableField<UmjetnikRecord, String> ROLA = createField(DSL.name("rola"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.umjetnik.korime</code>.
     */
    public final TableField<UmjetnikRecord, String> KORIME = createField(DSL.name("korime"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.umjetnik.email</code>.
     */
    public final TableField<UmjetnikRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(70).nullable(false), this, "");

    /**
     * The column <code>public.umjetnik.lozinka</code>.
     */
    public final TableField<UmjetnikRecord, String> LOZINKA = createField(DSL.name("lozinka"), SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>public.umjetnik.ime</code>.
     */
    public final TableField<UmjetnikRecord, String> IME = createField(DSL.name("ime"), SQLDataType.VARCHAR(70), this, "");

    /**
     * The column <code>public.umjetnik.prezime</code>.
     */
    public final TableField<UmjetnikRecord, String> PREZIME = createField(DSL.name("prezime"), SQLDataType.VARCHAR(70), this, "");

    /**
     * The column <code>public.umjetnik.opis</code>.
     */
    public final TableField<UmjetnikRecord, String> OPIS = createField(DSL.name("opis"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.umjetnik.slika</code>.
     */
    public final TableField<UmjetnikRecord, String> SLIKA = createField(DSL.name("slika"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.umjetnik.datum_registracije</code>.
     */
    public final TableField<UmjetnikRecord, LocalDate> DATUM_REGISTRACIJE = createField(DSL.name("datum_registracije"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field("CURRENT_DATE", SQLDataType.LOCALDATE)), this, "");

    private Umjetnik(Name alias, Table<UmjetnikRecord> aliased) {
        this(alias, aliased, null);
    }

    private Umjetnik(Name alias, Table<UmjetnikRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.umjetnik</code> table reference
     */
    public Umjetnik(String alias) {
        this(DSL.name(alias), UMJETNIK);
    }

    /**
     * Create an aliased <code>public.umjetnik</code> table reference
     */
    public Umjetnik(Name alias) {
        this(alias, UMJETNIK);
    }

    /**
     * Create a <code>public.umjetnik</code> table reference
     */
    public Umjetnik() {
        this(DSL.name("umjetnik"), null);
    }

    public <O extends Record> Umjetnik(Table<O> child, ForeignKey<O, UmjetnikRecord> key) {
        super(child, key, UMJETNIK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UmjetnikRecord, Long> getIdentity() {
        return (Identity<UmjetnikRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UmjetnikRecord> getPrimaryKey() {
        return Keys.UMJETNIK_PKEY;
    }

    @Override
    public List<UniqueKey<UmjetnikRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UMJETNIK_KORIME_KEY, Keys.UMJETNIK_EMAIL_KEY);
    }

    @Override
    public Umjetnik as(String alias) {
        return new Umjetnik(DSL.name(alias), this);
    }

    @Override
    public Umjetnik as(Name alias) {
        return new Umjetnik(alias, this);
    }

    @Override
    public Umjetnik as(Table<?> alias) {
        return new Umjetnik(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Umjetnik rename(String name) {
        return new Umjetnik(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Umjetnik rename(Name name) {
        return new Umjetnik(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Umjetnik rename(Table<?> name) {
        return new Umjetnik(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, String, String, String, String, String, String, LocalDate> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
